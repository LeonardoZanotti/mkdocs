{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nMkDocs\n\n\nHow to create your website with markdown files and MkDocs.\n\n\nInstalling MkDocs\n\n\nIn Debian and Ubuntu linux you can just use apt to get the package:\n\n\n$ sudo apt install mkdocs\n$ mkdocs --version      # show mkdocs version and successful installation\n\n\n\n\nOr use pip:\n\n\n$ pip install mkdocs\n$ mkdocs --version      # show mkdocs version and successful installation\n\n\n\n\nCreating a project\n\n\nTo create a new mkdocs project, just use:\n\n\n$ mkdocs new project-name\n$ cd project-name\n\n\n\n\nIt will create a \"project-name\" folder, and inside this folder will have a docs folder and a mkdocs.yml configuration file.\n\n\n|--docs\n|----index.md\n|--mkdocs.yml\n\n\n\n\nInside docs, put your markdown files, which will be the site pages.\n\n\nIn mkdocs.yml its possible to configure all the site, the basic configuration looks like:\n\n\nsite_name: <your-site-name>\nnav:                            # navigation menu\n  - Home: index.md              # home markdown file\n  - Page2: page2.md             # other page markdown file\n                                # create a page for each .md file\ntheme: readthedocs              # you can configure a theme for your website here\n\n\n\n\nRunning\n\n\nNow, lets test the site running, type \nmkdocs serve\n in your terminal and see your website in \nlocalhost:8000\n.\n\n\nBuilding\n\n\nTo put your site in production, do:\n\n\n$ mkdocs build\n\n\n\n\nIt will create a /site folder, and inside it we have:\n\n\n$ ls site\ncss  deploy  fonts  img  index.html\njs  mkdocs  search.html  sitemap.xml\n\n\n\n\nDeploy to GitHub\n\n\nNow, your project folder looks like:\n\n\n|--docs\n|----index.md\n|----page2.md\n|--site\n|--mkdocs.yml\n\n\n\n\nFirst, lets ignore the site folder for it doesnt go to our repository:\n\n\n$ echo \"site/\" > .gitignore\n\n\n\n\nThen, just do the deploy to Github Pages with the MkDocs command:\n\n\n$ mkdocs gh-deploy\n\n\n\n\nIt will create a gh-pages branch and push all to the repository (will need your Github email and password), so finish the site before the deploy. After the command, your website will be online on \nhttps://<your-github-name>.github.io/<your-repo-name>/\n\n\nLeonardoZanotti",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-mkdocs",
            "text": "For full documentation visit  mkdocs.org .",
            "title": "Welcome to MkDocs"
        },
        {
            "location": "/#commands",
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "Commands"
        },
        {
            "location": "/#project-layout",
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.",
            "title": "Project layout"
        },
        {
            "location": "/#mkdocs",
            "text": "How to create your website with markdown files and MkDocs.",
            "title": "MkDocs"
        },
        {
            "location": "/#installing-mkdocs",
            "text": "In Debian and Ubuntu linux you can just use apt to get the package:  $ sudo apt install mkdocs\n$ mkdocs --version      # show mkdocs version and successful installation  Or use pip:  $ pip install mkdocs\n$ mkdocs --version      # show mkdocs version and successful installation",
            "title": "Installing MkDocs"
        },
        {
            "location": "/#creating-a-project",
            "text": "To create a new mkdocs project, just use:  $ mkdocs new project-name\n$ cd project-name  It will create a \"project-name\" folder, and inside this folder will have a docs folder and a mkdocs.yml configuration file.  |--docs\n|----index.md\n|--mkdocs.yml  Inside docs, put your markdown files, which will be the site pages.  In mkdocs.yml its possible to configure all the site, the basic configuration looks like:  site_name: <your-site-name>\nnav:                            # navigation menu\n  - Home: index.md              # home markdown file\n  - Page2: page2.md             # other page markdown file\n                                # create a page for each .md file\ntheme: readthedocs              # you can configure a theme for your website here",
            "title": "Creating a project"
        },
        {
            "location": "/#running",
            "text": "Now, lets test the site running, type  mkdocs serve  in your terminal and see your website in  localhost:8000 .",
            "title": "Running"
        },
        {
            "location": "/#building",
            "text": "To put your site in production, do:  $ mkdocs build  It will create a /site folder, and inside it we have:  $ ls site\ncss  deploy  fonts  img  index.html\njs  mkdocs  search.html  sitemap.xml",
            "title": "Building"
        },
        {
            "location": "/#deploy-to-github",
            "text": "Now, your project folder looks like:  |--docs\n|----index.md\n|----page2.md\n|--site\n|--mkdocs.yml  First, lets ignore the site folder for it doesnt go to our repository:  $ echo \"site/\" > .gitignore  Then, just do the deploy to Github Pages with the MkDocs command:  $ mkdocs gh-deploy  It will create a gh-pages branch and push all to the repository (will need your Github email and password), so finish the site before the deploy. After the command, your website will be online on  https://<your-github-name>.github.io/<your-repo-name>/",
            "title": "Deploy to GitHub"
        },
        {
            "location": "/#leonardozanotti",
            "text": "",
            "title": "LeonardoZanotti"
        },
        {
            "location": "/deploy/",
            "text": "Heroku deploy\n\n\nGuide to deploy a Laravel (backend) + Nuxt Vuejs (frontend) dynamic application.\n\n\nIf you have a project just go to Deploy section.\n\n\nRequirements\n\n\nIm using the following, but you can use the versions you use in your project:\n\n\n\n\nComposer 1.10.13\n\n\nGit\n\n\nLaravel 5.7.29\n\n\nMariaDB 10.4.13\n\n\nNode 13.14.0 and Npm 6.14.4\n\n\nPHP 7.4.10\n\n\nVue 4.5.6\n\n\nYarn 1.22.4\n\n\nA Heroku account\n\n\nAnd Heroku CLI\n\n\n\n\nBackend installation\n\n\nIf you dont have a project and just wants to know how to deploy a heroku application, you can clone this repository and use the sample project or create a new project with \ncomposer create-project laravel/laravel your-backend-project-name\n.\n\n\n# CLone this project \n$ git clone https://github.com/LeonardoZanotti/heroku-deploy.git\n\n# Enter the backend folder\n$ cd backend/\n\n# Install the dependences\n$ composer install\n\n# Enter mysql\n$ sudo mysql -u root\n\n# Create the database\n$ create database capacitacao;\n\n# Create an user (replace 'newuser' and 'user_password' with your credentials)\n$ CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'user_password';\n\n# Give permission to the user\n$ GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';\n\n# Exit mysql\n$ exit\n\n# Clone the .env.example file to configure the database\n$ cp .env.example .env\n\n# .env configuration\n$ nano .env\n\n# Replace this infos with your credentials\n\"DB_DATABASE =  capacitacao\"\n\"DB_USERNAME = your_user\"\n\"DB_PASSWORD = your_password\"\n\n# Final configurations\n$ php artisan key:generate\n$ php artisan migrate:fresh --seed\n$ php artisan storage:link\n$ composer require laravel/passport\n$ php artisan passport:install\n\n# Run the project -> The Laravel page will be available on localhost:8000\n$ php artisan serve\n\n\n\n\nFrontend installation\n\n\nIf you want to create your own frontend project do:\n\n\n# Add the cli-init\n$ yarn global add @vue/cli-init\n\n# Create the nuxt project\n$ vue init nuxt-community/starter-template your-frontend-project-name\n\n\n\n\nOtherwise, just do the following:\n\n\n# Enter the frontend folder\n$ cd frontend/\n\n# Install dependences\n$ npm install\n\n# Run the frontend -> The Vue page will be available on localhost:8080\n$ npm run dev\n\n\n\n\nDeploy\n\n\nNow, with a project, we can do the deploy. First, do the login in the heroku-cli with:\n\n\n$ heroku login\n\n\n\n\nLogged in, lets do the backend deploy.\n\n\nIf your project has many branchs, remember to checkout to the branch that you wants to deploy.\n\n\nBackend deploy\n\n\n# Enter the backend folder\n$ cd backend/\n\n# If your project is already installed you can skip the configuration\n# Install all dependences\n$ composer install\n\n# Clone and config the .env\n$ cp .env.example .env\n$ nano .env\n\n\"DB_DATABASE =  capacitacao\"\n\"DB_USERNAME = your_user\"\n\"DB_PASSWORD = your_password\"\n\n# Recreate database and install passport\n$ php artisan migrate:fresh --seed\n$ php artisan passport:install\n\n# We need to initiate a repo in the backend folder, then\n$ git init\n\n# Configure .gitignore\n$ nano .gitignore\n\n# If you have a /storage/*.key in the .gitignore you should remove it. My gitignore:\n/node_modules\n/public/hot\n/public/storage\n/vendor\n.env\n.env.backup\n.phpunit.result.cache\nHomestead.json\nHomestead.yaml\nnpm-debug.log\nyarn-error.log\n\n# Then commit this\n$ git add .\n$ git commit -m \"Backend heroku\"\n\n# Now, we can create the heroku project. Attention! The name of the heroku project should be unique\n$ heroku create unique-name\n\n# Add a Procfile file. It will tells to heroku how to start the project\n$ echo \"web: vendor/bin/heroku-php-apache2 public/\" > Procfile\n\n# Commit the Procfile file\n$ git add Procfile\n$ git commit -m \"Procfile added\"\n\n# Show the key\n$ php artisan --no-ansi key:generate --show\n# Showed the key base64:iOdzZzO7CN4BTNc2QEfSdEQqaq0XlI9xPFYgAIjp29o=\n\n# Set Heroku key (Replace with your key)\n$ heroku config:set APP_KEY=base64:iOdzZzO7CN4BTNc2QEfSdEQqaq0XlI9xPFYgAIjp29o=\n\n# Push to heroku\n$ git push heroku master\n\n# Then, lets create the heroku database\n$ heroku addons:create heroku-postgresql:hobby-dev\n\n# You will need to get this infos in herokus site. When you log in and stay on the heroku dashboard, click on the project on heroku, then click on Resources and then on Heroku Postgres. A page will open. Then go to Settings and View Credentials. With the heroku credentials, replace this fields and do the command on terminal\n$ heroku config:set DB_CONNECTION=pgsql DB_DATABASE=dd0km0st511bfe DB_HOST=ec2-23-23-228-132.compute-1.amazonaws.com DB_PASSWORD=5a85a810116a5a550af303a614560040373e79a3159db057d20b7fa8fc1682ec DB_PORT=5432 DB_USERNAME=ymqegxrfhhkxap\n\n# Now, we just need to configure the heroku server, then lets enter the heroku bash\n$ heroku run bash\n$ php artisan migrate:fresh --seed\n$ php artisan passport:install\n$ exit\n\n# Open the deploy link\n$ heroku open\n\n\n\n\nThe backend site should open (if not, you can get the link in the heroku project). The site should show the laravel homepage (if is the sample project in this repo).\n\n\nFrontend\n\n\nNo worries, the hard part already gonne, this is easy peasy.\n\n\n# Enter the frontend folder\n$ cd ../frontend/\n\n# Start a new repository and add the files\n$ git init\n$ git add .\n\n# Create the heroku repository\n$ heroku create new-unique-name\n\n# Now, we will need open the package.json file in the frontend and add this\n\"engines\" : {\n    \"node\": \"10.x.x\",\n    \"npm\": \"6.4.1\"\n  }\n\n# Then open the nuxt.config.js (or the file that refers the backend) and add this with target pointing to your backend link\nproxy: {\n    '/api/': { target: 'https://backend-herokudeploy.herokuapp.com/' }\n  }\n\n# Do some more configurations\n$ heroku config:set NPM_CONFIG_PRODUCTION=false\n$ heroku config:set HOST=0.0.0.0\n$ heroku config:set NODE_ENV=production\n\n# Commit and push to heroku\n$ git add .\n$ git commit -m \"Frontend heroku\"\n$ git push heroku master\n\n# And open the frontend link\n$ heroku open\n\n\n\n\nThe frontend site should open (if not, you can get the link in the heroku project). The site should show the vuejs/nuxt homepage (if is the sample project in this repo).\n\n\nNow, your application is on heroku with the back and frontend.\n\n\nHeroku Cheatsheet\n\n\nheroku create\n : Create a heroku project \n\n\nheroku config\n : List the ambience variables \n\n\nheroku logs\n : Show the logs (--tail can be useful) \n\n\nheroku open\n : Open the deploy on the navigator \n\n\nheroku run bash\n : Open the herokus terminal \n\n\nheroku restart\n : Restart the application \n\n\nheroku ps\n : Show the dynos list and if the application is running \n\n\nheroku apps:destroy <application>\n : Delete the herokus application (need confirmation) \n\n\nLeonardoZanotti",
            "title": "Deploy"
        },
        {
            "location": "/deploy/#heroku-deploy",
            "text": "Guide to deploy a Laravel (backend) + Nuxt Vuejs (frontend) dynamic application.  If you have a project just go to Deploy section.",
            "title": "Heroku deploy"
        },
        {
            "location": "/deploy/#requirements",
            "text": "Im using the following, but you can use the versions you use in your project:   Composer 1.10.13  Git  Laravel 5.7.29  MariaDB 10.4.13  Node 13.14.0 and Npm 6.14.4  PHP 7.4.10  Vue 4.5.6  Yarn 1.22.4  A Heroku account  And Heroku CLI",
            "title": "Requirements"
        },
        {
            "location": "/deploy/#backend-installation",
            "text": "If you dont have a project and just wants to know how to deploy a heroku application, you can clone this repository and use the sample project or create a new project with  composer create-project laravel/laravel your-backend-project-name .  # CLone this project \n$ git clone https://github.com/LeonardoZanotti/heroku-deploy.git\n\n# Enter the backend folder\n$ cd backend/\n\n# Install the dependences\n$ composer install\n\n# Enter mysql\n$ sudo mysql -u root\n\n# Create the database\n$ create database capacitacao;\n\n# Create an user (replace 'newuser' and 'user_password' with your credentials)\n$ CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'user_password';\n\n# Give permission to the user\n$ GRANT ALL PRIVILEGES ON *.* TO 'newuser'@'localhost';\n\n# Exit mysql\n$ exit\n\n# Clone the .env.example file to configure the database\n$ cp .env.example .env\n\n# .env configuration\n$ nano .env\n\n# Replace this infos with your credentials\n\"DB_DATABASE =  capacitacao\"\n\"DB_USERNAME = your_user\"\n\"DB_PASSWORD = your_password\"\n\n# Final configurations\n$ php artisan key:generate\n$ php artisan migrate:fresh --seed\n$ php artisan storage:link\n$ composer require laravel/passport\n$ php artisan passport:install\n\n# Run the project -> The Laravel page will be available on localhost:8000\n$ php artisan serve",
            "title": "Backend installation"
        },
        {
            "location": "/deploy/#frontend-installation",
            "text": "If you want to create your own frontend project do:  # Add the cli-init\n$ yarn global add @vue/cli-init\n\n# Create the nuxt project\n$ vue init nuxt-community/starter-template your-frontend-project-name  Otherwise, just do the following:  # Enter the frontend folder\n$ cd frontend/\n\n# Install dependences\n$ npm install\n\n# Run the frontend -> The Vue page will be available on localhost:8080\n$ npm run dev",
            "title": "Frontend installation"
        },
        {
            "location": "/deploy/#deploy",
            "text": "Now, with a project, we can do the deploy. First, do the login in the heroku-cli with:  $ heroku login  Logged in, lets do the backend deploy.  If your project has many branchs, remember to checkout to the branch that you wants to deploy.",
            "title": "Deploy"
        },
        {
            "location": "/deploy/#backend-deploy",
            "text": "# Enter the backend folder\n$ cd backend/\n\n# If your project is already installed you can skip the configuration\n# Install all dependences\n$ composer install\n\n# Clone and config the .env\n$ cp .env.example .env\n$ nano .env\n\n\"DB_DATABASE =  capacitacao\"\n\"DB_USERNAME = your_user\"\n\"DB_PASSWORD = your_password\"\n\n# Recreate database and install passport\n$ php artisan migrate:fresh --seed\n$ php artisan passport:install\n\n# We need to initiate a repo in the backend folder, then\n$ git init\n\n# Configure .gitignore\n$ nano .gitignore\n\n# If you have a /storage/*.key in the .gitignore you should remove it. My gitignore:\n/node_modules\n/public/hot\n/public/storage\n/vendor\n.env\n.env.backup\n.phpunit.result.cache\nHomestead.json\nHomestead.yaml\nnpm-debug.log\nyarn-error.log\n\n# Then commit this\n$ git add .\n$ git commit -m \"Backend heroku\"\n\n# Now, we can create the heroku project. Attention! The name of the heroku project should be unique\n$ heroku create unique-name\n\n# Add a Procfile file. It will tells to heroku how to start the project\n$ echo \"web: vendor/bin/heroku-php-apache2 public/\" > Procfile\n\n# Commit the Procfile file\n$ git add Procfile\n$ git commit -m \"Procfile added\"\n\n# Show the key\n$ php artisan --no-ansi key:generate --show\n# Showed the key base64:iOdzZzO7CN4BTNc2QEfSdEQqaq0XlI9xPFYgAIjp29o=\n\n# Set Heroku key (Replace with your key)\n$ heroku config:set APP_KEY=base64:iOdzZzO7CN4BTNc2QEfSdEQqaq0XlI9xPFYgAIjp29o=\n\n# Push to heroku\n$ git push heroku master\n\n# Then, lets create the heroku database\n$ heroku addons:create heroku-postgresql:hobby-dev\n\n# You will need to get this infos in herokus site. When you log in and stay on the heroku dashboard, click on the project on heroku, then click on Resources and then on Heroku Postgres. A page will open. Then go to Settings and View Credentials. With the heroku credentials, replace this fields and do the command on terminal\n$ heroku config:set DB_CONNECTION=pgsql DB_DATABASE=dd0km0st511bfe DB_HOST=ec2-23-23-228-132.compute-1.amazonaws.com DB_PASSWORD=5a85a810116a5a550af303a614560040373e79a3159db057d20b7fa8fc1682ec DB_PORT=5432 DB_USERNAME=ymqegxrfhhkxap\n\n# Now, we just need to configure the heroku server, then lets enter the heroku bash\n$ heroku run bash\n$ php artisan migrate:fresh --seed\n$ php artisan passport:install\n$ exit\n\n# Open the deploy link\n$ heroku open  The backend site should open (if not, you can get the link in the heroku project). The site should show the laravel homepage (if is the sample project in this repo).",
            "title": "Backend deploy"
        },
        {
            "location": "/deploy/#frontend",
            "text": "No worries, the hard part already gonne, this is easy peasy.  # Enter the frontend folder\n$ cd ../frontend/\n\n# Start a new repository and add the files\n$ git init\n$ git add .\n\n# Create the heroku repository\n$ heroku create new-unique-name\n\n# Now, we will need open the package.json file in the frontend and add this\n\"engines\" : {\n    \"node\": \"10.x.x\",\n    \"npm\": \"6.4.1\"\n  }\n\n# Then open the nuxt.config.js (or the file that refers the backend) and add this with target pointing to your backend link\nproxy: {\n    '/api/': { target: 'https://backend-herokudeploy.herokuapp.com/' }\n  }\n\n# Do some more configurations\n$ heroku config:set NPM_CONFIG_PRODUCTION=false\n$ heroku config:set HOST=0.0.0.0\n$ heroku config:set NODE_ENV=production\n\n# Commit and push to heroku\n$ git add .\n$ git commit -m \"Frontend heroku\"\n$ git push heroku master\n\n# And open the frontend link\n$ heroku open  The frontend site should open (if not, you can get the link in the heroku project). The site should show the vuejs/nuxt homepage (if is the sample project in this repo).  Now, your application is on heroku with the back and frontend.",
            "title": "Frontend"
        },
        {
            "location": "/deploy/#heroku-cheatsheet",
            "text": "heroku create  : Create a heroku project   heroku config  : List the ambience variables   heroku logs  : Show the logs (--tail can be useful)   heroku open  : Open the deploy on the navigator   heroku run bash  : Open the herokus terminal   heroku restart  : Restart the application   heroku ps  : Show the dynos list and if the application is running   heroku apps:destroy <application>  : Delete the herokus application (need confirmation)",
            "title": "Heroku Cheatsheet"
        },
        {
            "location": "/deploy/#leonardozanotti",
            "text": "",
            "title": "LeonardoZanotti"
        }
    ]
}